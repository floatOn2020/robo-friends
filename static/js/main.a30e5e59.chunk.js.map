{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Scroll.jsx","components/Searchbox.js","components/ErrorBoundry.jsx","containers/App.js","serviceWorker.js","index.js"],"names":["Card","email","name","className","src","alt","CardList","robots","cards","map","user","i","key","id","Scroll","props","style","overflowY","borderTop","height","children","Searchbox","inputChange","type","placeholder","onChange","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","handleInput","e","input","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"uNAceA,EAZF,SAAC,GAA8C,IAAD,IAA5CC,aAA4C,MAAtC,kBAAsC,MAAnBC,YAAmB,MAAd,SAAc,EACzD,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAG,+BAA0BF,EAA1B,YAA0CG,IAAI,YACtD,6BACE,4BAAKH,GACL,2BAAID,MCEGK,EAPE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACXC,EAAQD,EAAOE,KAAI,SAACC,EAAMC,GAC9B,OAAO,kBAAC,EAAD,CAAMC,IAAKL,EAAOI,GAAGE,GAAIX,KAAMK,EAAOI,GAAGT,KAAMD,MAAOM,EAAOI,GAAGV,WAEzE,OAAO,6BAAMO,ICGAM,EARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAACC,UAAW,SAAUC,UAAW,iBAAkBC,OAAQ,SACpEJ,EAAMK,WCUEC,EAbG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAClB,OACE,yBAAKnB,UAAU,OACb,2BACEA,UAAU,mCACVoB,KAAK,OACLC,YAAY,gBACZC,SAAUH,MCaHI,E,kDAnBb,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAOC,GACvBC,KAAKC,SAAU,CAAEJ,UAAU,M,+BAI3B,OAAIG,KAAKJ,MAAMC,SACN,gDAEFG,KAAKhB,MAAMK,a,GAhBKa,aCiDZC,E,kDA3Cb,aAAc,IAAD,8BACX,gBAgBFC,YAAc,SAACC,GACb,EAAKJ,SAAS,CAAEK,MAAOD,EAAEE,OAAOC,SAhBhC,EAAKZ,MAAQ,CACXpB,OAAQ,GACR8B,MAAO,IAJE,E,8DAOKR,EAAOC,GACvBC,KAAKC,SAAS,CAACJ,UAAU,M,0CAGL,IAAD,OACnBY,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAEzB,OAAQqC,S,+BAO9B,IAAD,OACFC,EAAiBd,KAAKJ,MAAMpB,OAAOuC,QAAO,SAAAC,GAC9C,OAAOA,EAAM7C,KAAK8C,cAAcC,SAAS,EAAKtB,MAAMU,MAAMW,kBAE5D,OAAQjB,KAAKJ,MAAMpB,OAAO2C,OAGpB,yBAAK/C,UAAU,MACb,yBAAKA,UAAU,UACb,2CACA,kBAAC,EAAD,CAAWmB,YAAaS,KAAKI,eAE/B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU5B,OAAQsC,OAT3B,8C,GA3BWZ,aCKEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.a30e5e59.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({email=\"email@email.com\", name=\"frieda\"}) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${name}?200x200`} alt=\"person \"/>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n    );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card.js'\n\nconst CardList = ({robots}) => {\n  const cards = robots.map((user, i) => {\n    return <Card key={robots[i].id} name={robots[i].name} email={robots[i].email} />;\n  });\n  return <div>{cards}</div>;\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', borderTop: '1px solid grey', height: '80vh'}}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Scroll;\n","import React from 'react';\n\nconst Searchbox = ({inputChange}) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"text\"\n        placeholder=\"search robots\"\n        onChange={inputChange}\n        />\n    </div>\n  );\n}\n\nexport default Searchbox;\n","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState ({ hasError: true})\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>An error occured</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundry;\n","import React, {Component} from 'react';\nimport CardList from '../components/Cardlist'\nimport Scroll from '../components/Scroll'\nimport Searchbox from '../components/Searchbox'\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport {robots} from '../robots'\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      robots: [],\n      input: \"\"\n    }\n  }\n  componentDidCatch(error, info) {\n    this.setState({hasError: true})\n  }\n\n  componentDidMount () {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ robots: users }));\n  }\n\n  handleInput = (e) => {\n    this.setState({ input: e.target.value })\n  }\n\n  render () {\n    const filteredRobots = this.state.robots.filter(robot => {\n      return robot.name.toLowerCase().includes(this.state.input.toLowerCase())\n    })\n    return !this.state.robots.length ?\n       <h1>Loading...</h1> :\n         (\n          <div className=\"tc\">\n            <div className=\"header\">\n              <h1>Robofriends</h1>\n              <Searchbox inputChange={this.handleInput} />\n            </div>\n            <Scroll>\n              <ErrorBoundry>\n                <CardList robots={filteredRobots} />\n              </ErrorBoundry>\n            </Scroll>\n          </div>\n          );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}